[
  {
    "id": 1,
    "title": "모티베이션을 디자인하기",
    "img": "https://static.toss.im/lotties/20240216-blog-%E1%84%87%E1%85%A9%E1%86%AB%E1%84%86%E1%85%AE%E1%86%AB%E1%84%8A%E1%85%A5%E1%86%B7%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF.png",
    "desc": "UX Writing Team이 ‘스스로 참여하고 싶은 프로그램 만들기’라는 모호한 문제에 접근한 방법을 소개해 드릴게요.",
    "date": "2024.02.26",
    "type": "design",
    "content": "이번 아티클에서는 UX Writing Team이 ‘스스로 참여하고 싶은 프로그램 만들기’라는 모호한 문제에 접근한 방법을 소개해 드릴게요.  배경 작년 하반기에 우리 팀은 ‘문구 한두 개를 더 잘 쓰는 것만으로는 제품의 사용자 경험을 개선하는 데 한계가 있다’는 결론을 내렸어요. 이를 위해선 문구가 배치된 화면의 정보를 전체적으로 다듬을 수 있어야 한다는 판단으로 이어졌고요. 이러한 판단을 내리게 된 건 한 화면 안에서 여러 메시지를 한꺼번에 전달하려는 시도가 많아졌기 때문이에요. 토스의 제품 원칙(Product Principle: PP) 중 단 한 가지 메시지에 집중하자는 뜻의 ‘One thing per one page’라는 항목이 있는데, 토스 제품이 복잡해짐에 따라 이를 충분히 고려하지 않은 경우가 잦아진 거죠.  제품 디자인에 있어 최종 DRI가 없는 UX Writing Team이 어떻게 One thing per one page 원칙을 실현하는 데 기여할 수 있을까요? 그것도 토스 앱 전반적으로요. 우리 팀이 찾은 해결책은 모든 Product Designer가 제품 원칙을 토대로 디자인 피드백을 나누는 자리인 ‘PP 리뷰’의 밀도를 높이는 거였어요. ",
    "auth": "오천석ㆍUX Writer",
    "avatar": "https://static.toss.im/assets/toss-tech/cheonseok-oh.png"
  },
  {
    "id": 2,
    "title": "이런 것도 컴포넌트로 만들어도 될까?",
    "img": "https://static.toss.im/illusts/20240215-테크블로그_본문썸네일.png",
    "desc": "플랫폼 디자이너가 디자인 시스템에 새로운 컴포넌트를 만들 때 생기는 의심을 확신으로 만든 과정을 들려드릴게요.",
    "date": "2024.02.19",
    "type": "design",
    "content": "화면 위에서 버튼을 누른 후 아래에서 올라오는 바텀시트의 버튼까지 시선이 닿으려면, 사용자들은 인지 비용을 더 써야 하기 때문에 선택까지의 시간이 늘어나게 돼요. 현실 세계에서는 어떤 버튼을 눌렀을 때 그에 대한 반응이 버튼을 누른 곳에서 오는게 당연하잖아요. 이 사용성은 현실 세계와 동떨어진 모습을 띄고 있어요. 특히 지금 보시는 이미지처럼 옵션 개수가 적을 경우엔 거리가 더 멀어져요. 그동안 토스에는 모든 화면에서 셀렉터가 필요할 때 위와 같은 방법을 사용했었어요. 그 방법을 쓴 이유 중 하나는 컴포넌트 종류의 한계도 포함되어 있었어요. 셀렉터 역할을 할 컴포넌트가 바텀시트 밖에 없었던 것이죠.",
    "auth": "이정현ㆍPlatform Designer",
    "avatar": "https://static.toss.im/assets/toss-tech/jeonghyeon-lee.jpg"
  },
  {
    "id": 3,
    "title": "UX 리서처로의 시작과 성장: UX 리서치 파트너 이야기",
    "img": "https://static.toss.im/assets/toss-tech/20240214-%E1%84%90%E1%85%A6%E1%84%8F%E1%85%B3%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%84%80%E1%85%B3_%E1%84%87%E1%85%A9%E1%86%AB%E1%84%86%E1%85%AE%E1%86%AB%E1%84%8A%E1%85%A5%E1%86%B7%E1%84%82%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AF.png",
    "desc": "UX Research Partner로 입사해 유저 리서치팀에 온보딩했던 과정과 온보딩 후 어떻게 일하고 있는지 들려드릴게요.",
    "date": "2024.02.15",
    "type": "design",
    "content": "저희는 지난 8월, 유저 리서치팀에 처음으로 생긴 포지션인 UX Research Partner로 입사했어요. 어느덧 약 6개월이 지난 지금, 유저 리서치팀에 온보딩했던 3개월과 온보딩 후 어떻게 일하고 있는지 들려드릴게요. UX 리서치 파트너가 무엇인가요? 토스의 신입 리서처로서 다양한 제품의 사용성 테스트를 직접 진행하며 제품의 문제를 발굴하고 프로덕트를 개선하는 과정에 기여해요. UX 리서처, 어떻게 꿈꾸게 되었나요? 상연: 졸업작품 프로젝트를 진행하면서 유저의 경험에서 인사이트를 얻기 위해 리서치를 했었어요. 인터뷰를 진행하기 전에 데스크리서치를 통해 가설을 세웠는데, 유저를 만나보니 저희 생각과 다른 니즈와 페인포인트를 발견하게 되었어요. 리서치를 통해 알지 못했던 유저의 문제점을 알게 되었고, 새로운 인사이트를 얻을 수 있었어요. 유저를 직접 만나 인사이트를 도출하는 UX리서치 단계가 프로젝트 결과에 미치는 영향과 중요성에 대해 알게 되었고 이 역할을 수행하는 UX 리서처로의 성장을 꿈꾸게 되었어요. 서현: 토스에 합류하기 전, IT 스타트업에서 UX 디자이너로 일하며 리서치 실무를 경험하고 싶다는 생각이 더 커지게 되었어요. 당시 빠른 성장에 중점을 두었던 회사에서는 디자이너로서 사용자의 목소리를 듣거나 데이터적인 지표를 참고하며 사용성을 개선할 수 있는 기회가 제한적이었어요. 그렇다보니 팀원들과 의견을 공유하며 사용성을 향상시키는 과정에서도 한계를 느꼈어요. 자연스럽게 유저를 직접 만나 페인 포인트나 니즈를 파악하고, 그에 맞는 솔루션을 도출하는 UX 리서처를 꿈꾸게 되었어요.",
    "auth": "박서현",
    "avatar": "https://static.toss.im/assets/toss-tech/seohyun-park.jpeg"
  },
  {
    "id": 4,
    "title": "달리는 기차의 바퀴 교체하기 2. Restructuring",
    "img": "https://static.toss.im/assets/payments/contents/train-payments-thumb.jpg",
    "desc": "이미 운영 중인 제품을 전부 갈아엎고 다시 만드는 경험을 하기는 어려운데요. 운 좋게 팀 내 공감대가 형성되어 여러 팀원과 하나의 제품을 온전히 개선해 볼 수 있었어요. 앞선 내용에 이어서 이 글에서는 구체적으로 어떻게 개선했는지 소개할게요.",
    "date": "2024.02.23",
    "type": "tech",
    "content": "앞선 글 1. Planning에선 문제를 어떻게 정의하는지에 대해 다뤘어요. 구체적인 내용을 기약하고 글을 마무리했는데요, 이 글에선 구체적으로 어떤 작업들을 진행했는지 소개해요. 재구조화 앞선 글에서 소개했듯이 '재구조화'라는 단어는 리팩토링보다 좀 더 거시적인 관점에서의 개선을 뜻해요. 이번 프로젝트에서는 테스트 코드의 리팩토링 내성을 가장 먼저 개선하려고 했는데요, 그 이야기를 자세히 해볼게요. 리팩토링 내성 리팩토링은 다음과 같이 정의할 수 있습니다. 소프트웨어 공학에서 결과를 변경하지 않고 코드의 구조를 재조정하는 것 그리고 ‘리팩토링에 내성이 있다.’ 라는 말은 이렇게 풀 수 있어요. 제품 코드를 리팩토링 할 때, 테스트 코드를 변경하지 않고도 가능하며 테스트 코드 실행 결과가 달라지지 않는다. 리팩토링을 제대로 했다면 기능 변경이 없어야 해요. 테스트 코드 결과도 동일해야 합니다. 그 결과, 우리는 테스트 코드 실행 결과를 통해 기존에 동작하고 있던 기능이 그대로 잘 동작하고 있음을 보장할 수 있습니다. 테스트 코드를 신뢰하기 위해선 이 리팩토링 내성이 중요해요. 기능을 변경하지 않았는데 테스트가 실패하는 경우를 거짓된 제보라고 해요. 하나의 테스트 케이스라도 ‘거짓된 제보’를 하면 테스트 코드 전체를 의심해야 합니다.  그렇기에 리팩토링 내성을 먼저 개선하게 됐어요. 식별 리팩토링 내성을 낮추는 3가지를 식별했어요. 테스트 케이스 실행 순서에 의존하고 있는 경우 내부 구현에 의존하고 있는 경우 외부 의존성에 의존하고 있는 경우",
    "auth": "한재엽ㆍFrontend Developer",
    "avatar": "https://static.toss.im/assets/toss-tech/jaeyeop-han.jpg"
  },
  {
    "id": 5,
    "title": "OpenZFS로 성능과 비용, 두 마리 토끼 잡기",
    "img": "https://static.toss.im/assets/payments/contents/test-thumb-2.jpg",
    "desc": "토스페이먼츠 DevOps 엔지니어가 스토리지 파일 시스템을 OpenZFS로 변경하면서 성능은 높이고 비용은 절감한 과정을 소개합니다.",
    "date": "2024.02.20",
    "type": "tech",
    "content": "온라인 결제 서비스를 운영하는 토스페이먼츠에서는 매일 방대한 양의 로그 데이터가 만들어져요. 만들어진 대부분의 로그 데이터는 Elasticsearch에 보관하면서 분석과 시각화에 사용하고요. Elasticsearch에서 많은 양의 로그 데이터를 다루기 위해 여러 개의 노드를 하나로 묶는 클러스터 방식을 사용하고 있어요. 이렇게 하면 많은 데이터를 더 빠르게 처리할 수 있고, 노드 하나에 문제가 생겨도 전체 시스템이 멈추지 않는다는 장점이 있어요. 효율적인 데이터 관리를 위한 존 분류 먼저 Elasticsearch에서 클러스터 데이터를 더 효율적으로 처리하는 ‘존(zone)’에 대해 설명할게요. 데이터 종류에 따라 'Hot', 'Warm', 'Cold'라는 세 가지 존이 있어요. Hot 존에는 자주 사용되고, 최근에 수집된 데이터가 저장돼요. 최근 데이터는 자주, 많은 사람들이 사용하기 때문에 가장 빠른 스토리지를 사용해요. Warm 존에는 Hot 존 데이터만큼 자주 사용하지는 않지만 여전히 중요한 데이터가 저장돼요. 마지막 Cold 존에는 거의 사용하지 않는 오래된 데이터가 저장돼요. 그래서 상대적으로 비용이 저렴한 스토리지를 사용하죠.",
    "auth": "박명순ㆍ토스페이먼츠 서버 개발자",
    "avatar": "https://static.toss.im/3d-emojis/u1F603.png"
  },
  {
    "id": 6,
    "title": "캐시 문제 해결 가이드 - DB 과부하 방지 실전 팁",
    "img": "https://static.toss.im/assets/payments/contents/app-thumb.jpg",
    "desc": "대용량 트래픽 환경에서 캐시를 사용할 때 주의해야할 위험 상황과 예방법을 소개합니다.",
    "date": "2024.02.15",
    "type": "tech",
    "content": "데이터베이스는 시스템을 확장하기 어렵다. 주로 샤딩과 복제를 통해 어렵게 확장해야 하는데다가, 이 과정에서 일관성, 가용성, 분할 내성 셋을 모두 만족시킬 수 없다는 점이 널리 알려져 있다.(CAP 이론) 이러한 이유로 데이터베이스를 확장할 때는 신중한 고민이 필요하다. 가급적 데이터베이스의 부하를 최소화하여 확장 필요성을 줄이는 것이 바람직하다. 이를 위한 기본적인 접근법은 데이터베이스 조회 이전에 캐시를 먼저 확인하는 것이다. 높은 캐시 히트율을 유지하면 데이터베이스 확장 없이도 상당한 트래픽을 처리할 수 있다. 인메모리 저장소인 레디스(Redis)나 멤캐시드(Memcached)를 사용해서 캐시 시스템을 구축하는 곳이 많다. 이들 저장소는 사용하기 쉬운 데다가 응답 속도가 빠르기 때문이다. 특히 레디스를 쓰는 곳이 많은데 레디스는 다양한 활용 사례를 쉽게 찾을 수 있어서 안정적인 운영이 가능하다. 하지만 대용량 트래픽 환경에서 캐시를 사용할 때는 몇가지 주의해야 할 상황들이 있다. 이 글에서는 캐시를 사용함에도 불구하고 데이터베이스 부하로 인해 서비스 장애가 발생할 수 있는 위험 상황들을 설명하고 이를 예방하는 방법을 소개한다. 1.  캐시 쇄도 (Cache Stampede) 캐시 미스가 동시에 많이 발생할 경우 데이터베이스에 부담이 가중된다. '캐시 쇄도'라고 부르는 상황인데, 캐시가 전부 정확히 같은 시간에 만료되도록 구현하면 자주 발생한다. 예를 들어 매일 자정에 캐시를 갱신하는 경우를 생각해 보자. 갱신 시간에 맞춰 캐시를 일제히 만료되도록 설계하는 것은 구현하기 쉬운 데다가 최신 정보를 바로 제공할 수 있다는 이점이 있다. 하지만 이런 캐시 만료 전략은 캐시가 만료되는 자정마다 데이터베이스로 트래픽이 집중되어 서비스 장애가 발생할 위험이 있다.",
    "auth": "김신ㆍ토스코어 서버 개발자",
    "avatar": "https://static.toss.im/3d-emojis/u1F47B.png"
  }
]
